@Date			 : 10.10.2024
    @Author			 : Stein Lundbeck
    @Version         : 2.0.0.2
    @Latest          : 19.12.2024
*/class WebResult{constructor(a){this.Response=a,this.Status=a.status,this.StatusText=a.statusText}json=async()=>{let a="";return 200===this.Status&&(a=await this.Response.json()),a};text=async()=>{let a="";return 200===this.Status&&(a=await this.Response.text()),a}}class WebOptions{constructor(a,b,c,d={},e=[],f="post",g="common",h={},i="cors"){this.Controller=a,this.Action=b,this.Method=f,this.Query=d,this.RouteData=e,this.Data=h,this.Mode=i,this.Credentials=null,this.Url=WebUtility.GetUrl(this.Controller,this.Action,c,this.Query,this.RouteData),this.Headers=g&&"COMMON"!==g.toUpperCase()?g:{Accept:"application/json"}}set credentials(a){this.Credentials=a}}class WebUtility{static GetUrl=(a,b,c=null,d={},e=[])=>{let f=null===c?"/"+a+"/"+b:c,g=0;if(d&&0<Object.keys(d).length)for(let a in d=[d],d[0])f+=0===g?"?":"&",f+=a+"="+d[0][a],g++;else if(null!==e&&0<e.length)for(let a=0;a<e.length;a++)f+="/"+e[a];return f};static ProcessBodyData=a=>{let b={};return Object.keys(a).forEach(c=>{let d=a[c];null!==d&&""===d&&(d=null),b[c]=d}),b}}class WebRequest{static fetchAsync=async a=>{let b=null;a instanceof WebOptions||(a=new WebOptions(null,null,a,{},[],"get"));try{let c=await fetch(a.Url,{header:a.Headers,method:a.Method.toUpperCase(),mode:a.Mode,body:a.Data&&0<Object.keys(a.Data).length&&"GET"!==a.Method.toUpperCase()?JSON.stringify(WebUtility.ProcessBodyData(a.Data)):null});200===c.status?b=new WebResult(c):devLog("Error in WebRequestUtility while fetching url \""+a.Url+"\". Status: ("+c.status+") "+c.statusText,!0,fetchAsync.caller,b)}catch(b){devLog("Error in fetchAsync while fetching url \""+a.Url+"\". "+b.message)}return b};static apiAsync=async(a,b="post",c=[],d={})=>await WebRequest.fetchAsync(new WebOptions("API",a,null,{},c,b,null,d))}freeze(WebUtility);

	//# sourceMappingUrl=WebRequest.min.js.map
